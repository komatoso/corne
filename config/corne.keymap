/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        macros {
                lessThan: lessThan 
                        {
                        label = "lessThan";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LALT>
                                , <&macro_tap &kp KP_N6 &kp KP_N0 >
                                , <&macro_release &kp LALT>
                                ;
                        };
                greaterThan: greaterThan 
                        {
                        label = "greaterThan";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LALT>
                                , <&macro_tap &kp KP_N6 &kp KP_N2 >
                                , <&macro_release &kp LALT>
                                ;
                        };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | GUI |
// | SHFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ñ  |  '   |
// | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | BKSP | SPC | LWR |   | RSE | ENT  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp LGUI
   &kp LSHFT &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LCTRL &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
                  &kp BSPC &kp SPACE &mo 1   &mo 2 &kp RET &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | GUI |
// | SHFT |  !  |  "  |  ·  |  $  |  %  |   |     | UP  |  +  |  *  |     |     |
// |BTCLR | BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN | RGT |     |     |     |
//                    | BKSP| SPC |     |   |     | ENT | ALT |
                        bindings = <
   &kp TAB      &kp N1       &kp N2             &kp N3       &kp N4             &kp N5                  &kp N6          &kp N7          &kp N8          &kp N9           &kp N0   &kp LGUI
   &kp LSHFT    &kp LS(N1)   &kp LS(N2)         &kp LS(N3)   &kp LS(N4)         &kp LS(N5)              &trans          &kp UP          &kp KP_PLUS     &kp KP_MULTIPLY  &trans   &trans
   &bt BT_CLR   &bt BT_SEL 0 &bt BT_SEL 1       &bt BT_SEL 2 &bt BT_SEL 3       &bt BT_SEL 4            &kp LEFT        &kp DOWN        &kp RIGHT       &trans           &trans   &trans
                          	                &kp BSPC     &kp SPACE          &trans                  &trans          &kp RET         &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  |  |  @  |  #  |  $  |  %  |   |  &  |  /  |  (  |  )  |  =  | GUI |
// | CTRL |  ¡  |  '  |     |     |     |   |  {  |  }  |  <  |     |  ç  |  º  |
// | SHFT |     |     |     |     |     |   |  [  |  ]  |  >  |     | Ç   |  ª  |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB    &kp RA(N1)  &kp RA(N2)  &kp RA(N3)  &kp DLLR  &kp PRCNT     &kp CARET      &kp AMPS      &kp LS(N8)  &kp LPAR  &kp RPAR   &kp LGUI
   &kp LSHFT   &kp EQUAL  &kp MINUS  &trans     &trans    &trans        &kp RA(SQT)    &kp RA(BSLH)  &lessThan       &trans    &kp BSLH   &kp GRAVE
   &kp LCTRL   &kp UNDER     &trans     &trans     &trans    &trans        &kp RA(LBKT)   &kp RA(RBKT)  &greaterThan     &trans    &kp PIPE   &kp TILDE
                    	                  &kp DEL      &kp SPACE    &trans          &trans          &kp RET        &kp RALT
                        >;
                };
        };
};